{
  "name": "Booming Blade",
  "type": "spell",
  "img": "icons/svg/item-bag.svg",
  "effects": [
    {
      "_id": "CCwoK9mtWvwXziWp",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": 20
        }
      ],
      "disabled": false,
      "duration": {
        "rounds": 1,
        "startTime": null,
        "seconds": null,
        "combat": null,
        "turns": null,
        "startRound": null,
        "startTurn": null
      },
      "icon": "icons/svg/aura.svg",
      "label": "New Effect",
      "origin": "Item.kepjMl2DWORMwaAc",
      "transfer": true,
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [
            "turnStartSource"
          ],
          "transfer": true
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        }
      },
      "tint": null
    }
  ],
  "flags": {
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Booming Blade",
          "type": "script",
          "author": "4ft25hP617oXIBoS",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const lastArg = args[args.length - 1];\n\n// macro vars\nconst sequencerFile = \"jb2a.static_electricity.01.blue\";\nconst sequencerScale = 1.5;\nconst damageType = \"thunder\";\n\n// sequencer caller for effects on target\nfunction sequencerEffect(target, file, scale) {\n  if (game.modules.get(\"sequencer\")?.active && hasProperty(Sequencer.Database.entries, \"jb2a\")) {\n    new Sequence().effect().file(file).atLocation(target).scaleToObject(scale).play();\n  }\n}\n\nfunction weaponAttack(caster, sourceItemData, origin, target) {\n  const chosenWeapon = DAE.getFlag(caster, \"boomingBladeChoice\");\n  const filteredWeapons = caster.items.filter((i) => i.data.type === \"weapon\" && i.data.data.equipped);\n  const weaponContent = filteredWeapons\n    .map((w) => {\n      const selected = chosenWeapon && chosenWeapon == w.id ? \" selected\" : \"\";\n      return `<option value=\"${w.id}\"${selected}>${w.name}</option>`;\n    })\n    .join(\"\");\n\n  const content = `\n<div class=\"form-group\">\n <label>Weapons : </label>\n <select name=\"weapons\"}>\n ${weaponContent}\n </select>\n</div>\n`;\n  new Dialog({\n    title: \"Booming Blade: Choose a weapon to attack with\",\n    content,\n    buttons: {\n      Ok: {\n        label: \"Ok\",\n        callback: async (html) => {\n          const characterLevel = caster.data.type === \"character\" ? caster.data.data.details.level : caster.data.data.details.cr;\n          const cantripDice = 1 + Math.floor((characterLevel + 1) / 6);\n          const itemId = html.find(\"[name=weapons]\")[0].value;\n          const weaponItem = caster.getEmbeddedDocument(\"Item\", itemId);\n          DAE.setFlag(caster, \"boomingBladeChoice\", itemId);\n          const weaponCopy = duplicate(weaponItem);\n          delete weaponCopy._id;\n          if (cantripDice > 0) {\n            weaponCopy.data.damage.parts[0][0] += ` + ${cantripDice - 1}d8[${damageType}]`;\n          }\n          weaponCopy.name = weaponItem.name + \" [Booming Blade]\";\n          weaponCopy.effects.push({\n            changes: [{ key: \"macro.itemMacro\", mode: 0, value: \"\", priority: \"20\", }],\n            disabled: false,\n            duration: { rounds: 1 },\n            icon: sourceItemData.img,\n            label: sourceItemData.name,\n            origin,\n            transfer: false,\n            flags: { targetUuid: target.uuid, casterUuid: caster.uuid, origin, cantripDice, damageType, dae: { specialDuration: [\"turnStartSource\", \"isMoved\"], transfer: false }},\n          });\n          setProperty(weaponCopy, \"flags.itemacro\", duplicate(sourceItemData.flags.itemacro));\n          setProperty(weaponCopy, \"flags.midi-qol.effectActivation\", false);\n          const attackItem = new CONFIG.Item.documentClass(weaponCopy, { parent: caster });\n          const options = { showFullCard: false, createWorkflow: true, configureDialog: true };\n          await MidiQOL.completeItemRoll(attackItem, options);\n        },\n      },\n      Cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\nif(args[0].tag === \"OnUse\"){\n  if (lastArg.targets.length > 0) {\n    const casterData = await fromUuid(lastArg.actorUuid);\n    const caster = casterData.actor ? casterData.actor : casterData;\n    weaponAttack(caster, lastArg.itemData, lastArg.uuid, lastArg.targets[0]);\n  } else {\n    ui.notifications.error(\"Booming Blade: No target selected: please select a target and try again.\");\n  }\n\n} else if (args[0] === \"on\") {\n  const targetToken = canvas.tokens.get(lastArg.tokenId);\n  sequencerEffect(targetToken, sequencerFile, sequencerScale);\n} else if (args[0] === \"off\") {\n  // uses midis move flag to determine if to apply extra damage\n  if (lastArg[\"expiry-reason\"] === \"midi-qol:isMoved\" || lastArg[\"expiry-reaason\"] === \"midi-qol:isMoved\") {\n    const targetToken = await fromUuid(lastArg.tokenUuid);\n    const sourceItem = await fromUuid(lastArg.efData.flags.origin);\n    const caster = sourceItem.parent;\n    const casterToken = canvas.tokens.placeables.find((t) => t.actor?.uuid === caster.uuid);\n    const damageRoll = await new Roll(`${lastArg.efData.flags.cantripDice}d8[${damageType}]`).evaluate({ async: true });\n    if (game.dice3d) game.dice3d.showForRoll(damageRoll);\n    const workflowItemData = duplicate(sourceItem.data);\n    workflowItemData.data.target = { value: 1, units: \"\", type: \"creature\" };\n    workflowItemData.name = \"Booming Blade: Movement Damage\";\n\n    await new MidiQOL.DamageOnlyWorkflow(\n      caster,\n      casterToken.data,\n      damageRoll.total,\n      damageType,\n      [targetToken],\n      damageRoll,\n      {\n        flavor: `(${CONFIG.DND5E.damageTypes[damageType]})`,\n        itemCardId: \"new\",\n        itemData: workflowItemData,\n        isCritical: false,\n      }\n    );\n    sequencerEffect(targetToken, sequencerFile, sequencerScale);\n  }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "name": "Booming Blade",
        "type": "script",
        "scope": "global",
        "command": "const lastArg = args[args.length - 1];\n\n// macro vars\nconst sequencerFile = \"jb2a.static_electricity.01.blue\";\nconst sequencerScale = 1.5;\nconst damageType = \"thunder\";\n\n// sequencer caller for effects on target\nfunction sequencerEffect(target, file, scale) {\n    if (game.modules.get(\"sequencer\")?.active && hasProperty(Sequencer.Database.entries, \"jb2a\")) {\n        new Sequence().effect().file(file).atLocation(target).scaleToObject(scale).play();\n    }\n}\n\nfunction weaponAttack(caster, sourceItemData, origin, target) {\n    const chosenWeapon = DAE.getFlag(caster, \"boomingBladeChoice\");\n    const filteredWeapons = caster.items.filter((i) => i.type === \"weapon\" && i.system.equipped);\n    const weaponContent = filteredWeapons\n        .map((w) => {\n            const selected = chosenWeapon && chosenWeapon == w.id ? \" selected\" : \"\";\n            return `<option value=\"${w.id}\"${selected}>${w.name}</option>`;\n        })\n        .join(\"\");\n\n    const content = `\n<div class=\"form-group\">\n <label>Weapons : </label>\n <select name=\"weapons\"}>\n ${weaponContent}\n </select>\n</div>\n`;\n    new Dialog({\n        title: \"Booming Blade: Choose a weapon to attack with\",\n        content,\n        buttons: {\n            Ok: {\n                label: \"Ok\",\n                callback: async (html) => {\n                    const characterLevel = caster.type === \"character\" ? caster.system.details.level : caster.system.details.cr;\n                    const cantripDice = 1 + Math.floor((characterLevel + 1) / 6);\n                    const itemId = html.find(\"[name=weapons]\")[0].value;\n                    const weaponItem = caster.getEmbeddedDocument(\"Item\", itemId);\n                    DAE.setFlag(caster, \"boomingBladeChoice\", itemId);\n                    const weaponCopy = duplicate(weaponItem);\n                    delete weaponCopy._id;\n                    if (cantripDice > 0) {\n                        weaponCopy.system.damage.parts[0][0] += ` + ${cantripDice - 1}d8[${damageType}]`;\n                    }\n                    weaponCopy.name = weaponItem.name + \" [Booming Blade]\";\n                    weaponCopy.effects.push({\n                        changes: [{ key: \"macro.itemMacro\", mode: 0, value: \"\", priority: \"20\", }],\n                        disabled: false,\n                        duration: { rounds: 1 },\n                        icon: sourceItemData.img,\n                        label: sourceItemData.name,\n                        origin,\n                        transfer: false,\n                        flags: { targetUuid: target.uuid, casterUuid: caster.uuid, origin, cantripDice, damageType, dae: { specialDuration: [\"turnStartSource\", \"isMoved\"], transfer: false } },\n                    });\n                    setProperty(weaponCopy, \"flags.itemacro\", duplicate(sourceItemData.flags.itemacro));\n                    setProperty(weaponCopy, \"flags.midi-qol.effectActivation\", false);\n                    const attackItem = new CONFIG.Item.documentClass(weaponCopy, { parent: caster });\n                    const options = { showFullCard: false, createWorkflow: true, configureDialog: true };\n                    await MidiQOL.completeItemRoll(attackItem, options);\n                },\n            },\n            Cancel: {\n                label: \"Cancel\",\n            },\n        },\n    }).render(true);\n}\n\nif (args[0].macroPass === \"preItemRoll\") {\n    if (lastArg.targets.length > 0) {\n        const casterData = await fromUuid(lastArg.actorUuid);\n        const caster = casterData.actor ? casterData.actor : casterData;\n        weaponAttack(caster, lastArg.itemData, lastArg.uuid, lastArg.targets[0]);\n    } else {\n        ui.notifications.error(\"Booming Blade: No target selected: please select a target and try again.\");\n    }\n\n} else if (args[0] === \"on\") {\n    const targetToken = canvas.tokens.get(lastArg.tokenId);\n    sequencerEffect(targetToken, sequencerFile, sequencerScale);\n} else if (args[0] === \"off\") {\n    // uses midis move flag to determine if to apply extra damage\n    if (lastArg[\"expiry-reason\"] === \"midi-qol:isMoved\" || lastArg[\"expiry-reaason\"] === \"midi-qol:isMoved\") {\n        const targetToken = await fromUuid(lastArg.tokenUuid);\n        const sourceItem = await fromUuid(lastArg.efData.flags.origin);\n        \n        let itemCopy = sourceItem.toObject();\n        itemCopy.data.target = { value: 1, units: \"\", type: \"creature\" };\n        itemCopy.flags.itemacro = {};\n        itemCopy.name = \"Booming Blade: Movement Damage\";\n        itemCopy.system.damage.parts = [[`${lastArg.efData.flags.cantripDice}d8`, `${CONFIG.DND5E.damageTypes[damageType]}`]];\n        itemCopy.flags['midi-qol'].onUseMacroName = \"\";\n        \n        const ownedItem = new CONFIG.Item.documentClass(itemCopy, {parent: sourceItem.parent});\n        const options = { showFullCard: false, createWorkflow: true, configureDialog: true};\n        await MidiQOL.completeItemUse(ownedItem, {}, options);\n        \n        sequencerEffect(targetToken, sequencerFile, sequencerScale);\n    }\n}",
        "author": "4ft25hP617oXIBoS",
        "_id": null,
        "img": "icons/svg/dice-target.svg",
        "folder": null,
        "sort": 0,
        "ownership": {
          "default": 0
        },
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "midi-qol": {
      "fumbleThreshold": null,
      "effectActivation": false,
      "onUseMacroName": "[preItemRoll]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.kepjMl2DWORMwaAc"
    },
    "exportSource": {
      "world": "ddf-friends-characters",
      "system": "dnd5e",
      "coreVersion": "10.288",
      "systemVersion": "2.0.3"
    }
  },
  "system": {
    "description": {
      "value": "",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": "",
      "recovery": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": false,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "2.0.3",
    "coreVersion": "10.288",
    "createdTime": 1666887653157,
    "modifiedTime": 1666976733319,
    "lastModifiedBy": "4ft25hP617oXIBoS"
  }
}