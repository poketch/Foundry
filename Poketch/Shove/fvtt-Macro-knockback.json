{
  "name": "Knockback",
  "type": "script",
  "author": "4ft25hP617oXIBoS",
  "img": "icons/svg/dice-target.svg",
  "scope": "global",
  "command": "// created by theripper93#3276\n\n\nlet pusher = canvas.tokens.get(args[0]);\nlet target = canvas.tokens.get(args[1]);\nconsole.log(pusher)\nconsole.log(target)\nlet knockDist = 5;\nknockback(pusher,target,knockDist);\n \n\nasync function knockback(ptoken,ttoken,distance){\n\n\n    const x1 = ptoken.center.x;\n    const x2 = ttoken.center.x;\n    const y1 = ptoken.center.y;\n    const y2 = ttoken.center.y;\n    let angcoeff = Math.abs((y2-y1)/(x2-x1));\n    if(angcoeff > 1) angcoeff = 1/angcoeff;\n    const unitDistance = distance+(distance*Math.sqrt(2)-distance)*angcoeff;\n    const gridUnit = canvas.scene.data.grid;\n    console.log(angcoeff,unitDistance);\n    distance = (distance*canvas.scene.data.grid)/canvas.scene.data.gridDistance;\n\n    async function getXy(x){\n\n        return (y2-y1)*(x-x1)/(x2-x1)+y1;\n\n    }\n\n    async function findDestination(){\n\n        const scenew = canvas.dimensions.width;\n        let coordinatesArray = [];\n        for (let i = 0; i <= scenew; i+=1){\n            \n            let ty = await getXy(i);\n            let snapCoord = await canvas.grid.getCenter(i, ty);\n            let cdist = await canvas.grid.measureDistance({\"x\" : snapCoord[0],\"y\" : snapCoord[1]}, ttoken.center);\n            if(await canvas.grid.measureDistance({\"x\" : snapCoord[0],\"y\" : snapCoord[1]}, ptoken.center)>await canvas.grid.measureDistance(ttoken.center, ptoken.center) && await canvas.grid.measureDistance({\"x\" : snapCoord[0],\"y\" : snapCoord[1]}, ptoken.center) > unitDistance){\n                coordinatesArray.push({\"x\" : i,\"y\" : ty, \"dist\" : cdist});\n            }\n            \n        }\n            return coordinatesArray;\n\n    }\n    if(ptoken.center.x == ttoken.center.x){\n\n        if(ptoken.center.y - ttoken.center.y > 0){\n            await updateKB({\"y\": ttoken.data.y-distance,\"x\": ttoken.data.x},{\"x\": ttoken.center.x,\"y\": ttoken.center.y-distance})\n        }\n        else{\n            await updateKB({\"y\": ttoken.data.y+distance,\"x\": ttoken.data.x},{\"x\": ttoken.center.x,\"y\": ttoken.center.y+distance})\n        }\n\n    }\n    else if (ptoken.center.y == ttoken.center.y){\n\n        if(ptoken.center.x - ttoken.center.x > 0){\n            await updateKB({\"x\": ttoken.data.x-distance,\"y\": ttoken.data.y},{\"x\": ttoken.center.x-distance,\"y\": ttoken.center.y})\n        }\n        else{\n            await updateKB({\"x\": ttoken.data.x+distance,\"y\": ttoken.data.y},{\"x\": ttoken.center.x+distance,\"y\": ttoken.center.y})\n        }\n\n    }\n    else{\n\n        let fdest = await findDestination();\n        let coord = fdest.reduce(function(prev, curr) {\n            return (Math.abs(curr.dist - unitDistance) < Math.abs(prev.dist - unitDistance) ? curr : prev);\n          });\n        fdest = await canvas.grid.getSnappedPosition(coord.x-gridUnit/2, coord.y-gridUnit/2, 1);\n        await updateKB(fdest);\n        \n\n    }\n    async function updateKB(center,originalcenter){\n        if(originalcenter){\n            if(await ttoken.checkCollision(originalcenter)){\n                if(knockDist <= 5) return;\n                knockDist-=5;\n                await knockback(pusher,pushed,knockDist);\n            }\n            else{\n            await ttoken.document.update(center);\n            }\n        }\n        else{\n            if(await ttoken.checkCollision(center)){\n                if(knockDist <= 5) return;\n                knockDist-=5;\n                await knockback(pusher,pushed,knockDist);\n            }\n            else{\n            await ttoken.document.update(center);\n            }\n        }\n    }\n        \n}",
  "flags": {
    "combat-utility-belt": {
      "macroTrigger": ""
    },
    "advanced-macros": {
      "runAsGM": true
    },
    "exportSource": {
      "world": "ddf-friends-characters",
      "system": "dnd5e",
      "coreVersion": "9.249",
      "systemVersion": "1.6.2"
    }
  }
}